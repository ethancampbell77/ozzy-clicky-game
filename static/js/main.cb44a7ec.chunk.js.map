{"version":3,"sources":["components/GameInfo/index.js","components/Header/index.js","components/Jumbotron/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["GameInfo","state","message","animating","renderMessage","_this","prevState","score","_ref","topScore","newState","this","props","setState","_this2","react_default","a","createElement","className","onAnimationEnd","Component","Header","href","src","components_GameInfo","Jumbotron","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","concat","image","shake","Footer","Main","data","handleCorrectGuess","newData","_this$state","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","Object","objectSpread","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","components_Header","components_Jumbotron","components_Container","components_ClickItem","key","components_Footer","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cb44a7ec.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\n// NavMessage renders an li tag containing an message for the user\n\nclass GameInfo extends Component {\n  state = {\n    message: \"\",\n    animating: false\n  };\n\n  componentDidUpdate({ score, topScore }, prevState) {\n    const newState = { animating: true };\n\n    if (score === 0 && topScore === 0) {\n      newState.message = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.message = \"incorrect\";\n    } else {\n      newState.message = \"correct\";\n    }\n\n    if (score !== this.props.score || this.state.message !== newState.message) {\n      this.setState(newState);\n    }\n  }\n\n  renderMessage = () => {\n    switch (this.state.message) {\n    case \"correct\":\n      return \"YEAH BUDDY!\";\n    case \"incorrect\":\n      return \"NOPE!!!\";\n    default:\n      return \"\";\n    }\n  };\n\n  render() {\n    return (\n      <li\n        className={this.state.animating ? this.state.message : \"\"}\n        onAnimationEnd={() => this.setState({ animating: false })}\n      >\n        {this.renderMessage()}\n      </li>\n    );\n  }\n}\n\nexport default GameInfo;\n","import React from \"react\"\r\nimport GameInfo from \"../GameInfo\";\r\nimport \"./style.css\";\r\n\r\n\r\n    function Header(props) {\r\n      return (\r\n    <nav className=\"navbar\">\r\n      <ul>\r\n        <li className=\"brand\">\r\n          <a href=\"/\"><img className=\"logo\" src=\"../assets/images/ozzyLogo.png\"/></a>\r\n        </li>\r\n        <GameInfo score={props.score} topScore={props.topScore} />\r\n        <li>\r\n           Score: {props.score} | Top Score: {props.topScore}\r\n        </li>\r\n      </ul>\r\n  \r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron() {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <p className=\"jumboText1\">Faces of Ozz</p>\r\n            <p className=\"jumboText2\">Click on an image once and earn points. Twice and you lose it all.</p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default ClickItem;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">\n        Faces of Ozz: The Game \n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\r\nimport Header from \"../Header\";\r\nimport Jumbotron from \"../Jumbotron\";\r\nimport Container from \"../Container\";\r\nimport ClickItem from \"../ClickItem\";\r\nimport Footer from \"../Footer\";\r\nimport data from \"../../data.json\";\r\n\r\nclass Main extends Component {\r\nstate = {\r\n    data,\r\n    score: 0,\r\n    topScore: 0\r\n};\r\n\r\ncomponentDidMount() {\r\n    this.setState({ data: this.shuffleData(this.state.data) });\r\n}\r\n\r\nhandleCorrectGuess = newData => {\r\n    const { topScore, score } = this.state;\r\n    const newScore = score + 1;\r\n    const newTopScore = Math.max(newScore, topScore);\r\n\r\n    this.setState({\r\n    data: this.shuffleData(newData),\r\n    score: newScore,\r\n    topScore: newTopScore\r\n    });\r\n};\r\n\r\nhandleIncorrectGuess = data => {\r\n    this.setState({\r\n    data: this.resetData(data),\r\n    score: 0\r\n    });\r\n};\r\n\r\nresetData = data => {\r\n    const resetData = data.map(item => ({ ...item, clicked: false }));\r\n    return this.shuffleData(resetData);\r\n};\r\n\r\nshuffleData = data => {\r\n    let i = data.length - 1;\r\n    while (i > 0) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = data[i];\r\n    data[i] = data[j];\r\n    data[j] = temp;\r\n    i--;\r\n    }\r\n    return data;\r\n};\r\n\r\nhandleItemClick = id => {\r\n    let guessedCorrectly = false;\r\n    const newData = this.state.data.map(item => {\r\n    const newItem = { ...item };\r\n    if (newItem.id === id) {\r\n        if (!newItem.clicked) {\r\n        newItem.clicked = true;\r\n        guessedCorrectly = true;\r\n        }\r\n    }\r\n    return newItem;\r\n    });\r\n    guessedCorrectly\r\n    ? this.handleCorrectGuess(newData)\r\n    : this.handleIncorrectGuess(newData);\r\n};\r\n\r\nrender() {\r\n    return (\r\n    <div>\r\n        <Header score={this.state.score} topScore={this.state.topScore}/>\r\n        <Jumbotron />\r\n        <Container>\r\n        {this.state.data.map(item => (\r\n            <ClickItem\r\n            key={item.id}\r\n            id={item.id}\r\n            shake={!this.state.score && this.state.topScore}\r\n            handleClick={this.handleItemClick}\r\n            image={item.image}\r\n            />\r\n        ))}\r\n        </Container>\r\n        <Footer />\r\n    </div>\r\n    );\r\n}\r\n}\r\n\r\nexport default Main;","\nimport React from \"react\";\nimport Main from \"./components/Main\";\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}